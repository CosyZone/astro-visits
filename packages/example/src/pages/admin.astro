---
import { VisitsQuery } from '@coffic/astro-visits';
import { isBot } from '@coffic/astro-visits';

export const prerender = false;

// 创建查询实例（直接传递 Astro.locals）
const visitsQuery = new VisitsQuery(Astro.locals);

// 获取查询参数
const url = new URL(Astro.request.url);
const page = parseInt(url.searchParams.get('page') || '1');
const limit = parseInt(url.searchParams.get('limit') || '10');
const urlFilter = url.searchParams.get('url') || undefined;

// 查询数据
const visits = await visitsQuery.getVisits({
  page,
  limit,
  sortBy: 'timestamp',
  sortOrder: 'desc',
  filters: {
    url: urlFilter,
  },
});

// 获取统计数据
const stats = await visitsQuery.getStats();

// 获取热门页面
const topPages = await visitsQuery.getTopPages(5);

// 获取最近7天统计
const recentStats = await visitsQuery.getRecentStats(7);
---

<html>
  <head>
    <meta charset="UTF-8" />
    <title>访问数据管理 - Astro Visits Example</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
          sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
      }

      .header {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .stat-number {
        font-size: 2em;
        font-weight: bold;
        color: #2563eb;
        margin-bottom: 5px;
      }

      .stat-label {
        color: #6b7280;
        font-size: 0.9em;
      }

      .section {
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
      }

      .visits-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
      }

      .visits-table th,
      .visits-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e5e7eb;
      }

      .visits-table th {
        background-color: #f9fafb;
        font-weight: 600;
        color: #374151;
      }

      .visits-table tr:hover {
        background-color: #f9fafb;
      }

      .url-cell {
        max-width: 300px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
      }

      .pagination a {
        padding: 8px 12px;
        background: #2563eb;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.2s;
      }

      .pagination a:hover {
        background: #1d4ed8;
      }

      .pagination a:disabled {
        background: #9ca3af;
        cursor: not-allowed;
      }

      .filter-form {
        display: flex;
        gap: 10px;
        align-items: center;
        margin-bottom: 20px;
      }

      .filter-form input {
        padding: 8px 12px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        font-size: 14px;
      }

      .filter-form button {
        padding: 8px 16px;
        background: #10b981;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .filter-form button:hover {
        background: #059669;
      }

      .top-pages {
        display: grid;
        gap: 10px;
      }

      .top-page-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background: #f9fafb;
        border-radius: 4px;
      }

      .page-url {
        font-family: monospace;
        font-size: 0.9em;
        color: #374151;
      }

      .page-count {
        background: #2563eb;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: 600;
      }

      .nav-links {
        margin-bottom: 20px;
      }

      .nav-links a {
        color: #2563eb;
        text-decoration: none;
        margin-right: 15px;
      }

      .nav-links a:hover {
        text-decoration: underline;
      }

      .actions-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding: 10px;
        background: #f9fafb;
        border-radius: 4px;
      }

      .batch-actions {
        display: flex;
        gap: 10px;
        align-items: center;
      }

      .delete-btn {
        padding: 6px 12px;
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.2s;
      }

      .delete-btn:hover {
        background: #dc2626;
      }

      .delete-btn:disabled {
        background: #9ca3af;
        cursor: not-allowed;
      }

      .delete-btn.single {
        padding: 4px 8px;
        font-size: 12px;
      }

      .checkbox-column {
        width: 40px;
        text-align: center;
      }

      .action-column {
        width: 80px;
        text-align: center;
      }

      .select-all-checkbox {
        cursor: pointer;
      }

      .message {
        padding: 10px;
        margin-bottom: 15px;
        border-radius: 4px;
        display: none;
      }

      .message.success {
        background: #d1fae5;
        color: #065f46;
        border: 1px solid #10b981;
      }

      .message.error {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #ef4444;
      }

      .message.show {
        display: block;
      }

      .visitor-type {
        text-align: center;
      }

      .visitor-type-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75em;
        font-weight: 600;
        text-transform: uppercase;
      }

      .visitor-type-badge.bot {
        background: #fef3c7;
        color: #92400e;
      }

      .visitor-type-badge.human {
        background: #dbeafe;
        color: #1e40af;
      }
    </style>
  </head>
  <body>
    <div class="header">
      <h1>📊 访问数据管理</h1>
      <p>使用 astro-visits 工具类查询和展示访问数据</p>

      <div class="nav-links">
        <a href="/">🏠 首页</a>
        <a href="/about">📄 关于页面</a>
      </div>
    </div>

    <!-- 统计概览 -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-number">{stats.totalVisits}</div>
        <div class="stat-label">总访问量</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">{stats.uniqueVisitors}</div>
        <div class="stat-label">独立访客</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">{stats.todayVisits}</div>
        <div class="stat-label">今日访问</div>
      </div>
      <div class="stat-card">
        <div class="stat-number">{visits.pagination.totalPages}</div>
        <div class="stat-label">总页数</div>
      </div>
    </div>

    <!-- 筛选表单 -->
    <div class="section">
      <h2>🔍 筛选访问记录</h2>
      <form method="GET" class="filter-form">
        <input
          type="text"
          name="url"
          placeholder="筛选 URL（包含关键词）"
          value={urlFilter || ''}
        />
        <input
          type="number"
          name="limit"
          placeholder="每页数量"
          value={limit}
          min="1"
          max="100"
        />
        <button type="submit">筛选</button>
        {urlFilter && <a href="/admin">清除筛选</a>}
      </form>
    </div>

    <!-- 访问记录表格 -->
    <div class="section">
      <h2>📋 访问记录</h2>
      <p>
        显示第 {visits.pagination.page} 页，共 {visits.pagination.totalPages} 页，总计
        {visits.pagination.total} 条记录
      </p>

      <div id="message" class="message"></div>

      <div class="actions-bar">
        <div class="batch-actions">
          <input
            type="checkbox"
            id="selectAll"
            class="select-all-checkbox"
            title="全选/取消全选"
          />
          <span id="selectedCount">已选择 0 项</span>
          <button
            id="batchDeleteBtn"
            class="delete-btn"
            disabled
            data-action="delete-batch">
            批量删除
          </button>
        </div>
      </div>

      <table class="visits-table">
        <thead>
          <tr>
            <th class="checkbox-column">
              <input
                type="checkbox"
                id="selectAllHeader"
                class="select-all-checkbox"
                title="全选/取消全选"
              />
            </th>
            <th>时间</th>
            <th>URL</th>
            <th>IP 地址</th>
            <th>来源</th>
            <th>语言</th>
            <th>访问者类型</th>
            <th>设备信息</th>
            <th class="action-column">操作</th>
          </tr>
        </thead>
        <tbody>
          {
            visits.data.map((visit) => (
              <tr data-visit-id={visit.id}>
                <td class="checkbox-column">
                  <input
                    type="checkbox"
                    class="visit-checkbox"
                    value={visit.id}
                    onchange="updateSelectedCount()"
                  />
                </td>
                <td>{new Date(visit.timestamp).toLocaleString('zh-CN')}</td>
                <td class="url-cell" title={visit.url}>
                  {visit.url}
                </td>
                <td>{visit.ip}</td>
                <td title={visit.referrer}>
                  {visit.referrer
                    ? visit.referrer.length > 30
                      ? visit.referrer.substring(0, 30) + '...'
                      : visit.referrer
                    : '-'}
                </td>
                <td>{visit.language}</td>
                <td class="visitor-type">
                  {isBot(visit.user_agent || '') ? (
                    <span class="visitor-type-badge bot">🤖 机器人</span>
                  ) : (
                    <span class="visitor-type-badge human">👤 人类</span>
                  )}
                </td>
                <td title={visit.user_agent}>
                  {visit.user_agent.substring(0, 50)}...
                </td>
                <td class="action-column">
                  <button
                    class="delete-btn single"
                    data-visit-id={visit.id}
                    data-action="delete-single"
                    title="删除这条记录">
                    删除
                  </button>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>

      <!-- 分页 -->
      <div class="pagination">
        {
          visits.pagination.page > 1 && (
            <a
              href={`/admin?page=${visits.pagination.page - 1}&limit=${limit}${urlFilter ? `&url=${encodeURIComponent(urlFilter)}` : ''}`}>
              ← 上一页
            </a>
          )
        }

        <span>
          第 {visits.pagination.page} 页，共 {visits.pagination.totalPages} 页
        </span>

        {
          visits.pagination.page < visits.pagination.totalPages && (
            <a
              href={`/admin?page=${visits.pagination.page + 1}&limit=${limit}${urlFilter ? `&url=${encodeURIComponent(urlFilter)}` : ''}`}>
              下一页 →
            </a>
          )
        }
      </div>
    </div>

    <!-- 热门页面 -->
    <div class="section">
      <h2>🔥 热门页面</h2>
      <div class="top-pages">
        {
          topPages.map((page, index) => (
            <div class="top-page-item">
              <span class="page-url">{page.url}</span>
              <span class="page-count">{page.count} 次访问</span>
            </div>
          ))
        }
      </div>
    </div>

    <!-- 最近7天统计 -->
    <div class="section">
      <h2>📈 最近7天访问趋势</h2>
      <div class="top-pages">
        {
          recentStats.map((day, index) => (
            <div class="top-page-item">
              <span class="page-url">{day.date}</span>
              <span class="page-count">{day.count} 次访问</span>
            </div>
          ))
        }
      </div>
    </div>

    <script>
      // 初始化变量
      const selectAllCheckboxes = document.querySelectorAll(
        '.select-all-checkbox',
      );
      const visitCheckboxes = document.querySelectorAll('.visit-checkbox');
      const batchDeleteBtn = document.getElementById('batchDeleteBtn');
      const selectedCountSpan = document.getElementById('selectedCount');

      // 全选/取消全选功能
      selectAllCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener('change', function () {
          visitCheckboxes.forEach((cb) => {
            if (cb instanceof HTMLInputElement) {
              cb.checked = (this as HTMLInputElement).checked;
            }
          });
          updateSelectedCount();
        });
      });

      // 更新选中数量
      function updateSelectedCount() {
        const checked = document.querySelectorAll('.visit-checkbox:checked');
        const count = checked.length;
        if (selectedCountSpan) {
          selectedCountSpan.textContent = `已选择 ${count} 项`;
        }
        if (batchDeleteBtn instanceof HTMLButtonElement) {
          batchDeleteBtn.disabled = count === 0;
        }

        // 更新全选复选框状态
        selectAllCheckboxes.forEach((cb) => {
          if (cb instanceof HTMLInputElement) {
            cb.checked =
              count === visitCheckboxes.length && visitCheckboxes.length > 0;
            cb.indeterminate = count > 0 && count < visitCheckboxes.length;
          }
        });
      }

      // 显示消息
      function showMessage(text, type = 'success') {
        const messageEl = document.getElementById('message');
        if (messageEl) {
          messageEl.textContent = text;
          messageEl.className = `message ${type} show`;
          setTimeout(() => {
            messageEl.classList.remove('show');
          }, 3000);
        }
      }

      // 删除单条记录
      async function deleteVisit(id) {
        if (!confirm('确定要删除这条访问记录吗？')) {
          return;
        }

        try {
          const response = await fetch('/api/delete-visits', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id }),
          });

          const result = await response.json();

          if (result.success) {
            showMessage('删除成功', 'success');
            // 移除对应的表格行
            const row = document.querySelector(`tr[data-visit-id="${id}"]`);
            if (row) {
              row.remove();
              updateSelectedCount();
            }
            // 延迟刷新页面以更新统计数据
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            showMessage(result.message || '删除失败', 'error');
          }
        } catch (error) {
          console.error('Delete error:', error);
          showMessage('删除失败：网络错误', 'error');
        }
      }

      // 批量删除
      async function batchDelete() {
        const checked = document.querySelectorAll('.visit-checkbox:checked');
        const ids = Array.from(checked)
          .filter(
            (cb): cb is HTMLInputElement => cb instanceof HTMLInputElement,
          )
          .map((cb) => parseInt(cb.value));

        if (ids.length === 0) {
          showMessage('请先选择要删除的记录', 'error');
          return;
        }

        if (!confirm(`确定要删除选中的 ${ids.length} 条访问记录吗？`)) {
          return;
        }

        try {
          const response = await fetch('/api/delete-visits', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ ids }),
          });

          const result = await response.json();

          if (result.success) {
            showMessage(`成功删除 ${result.deletedCount} 条记录`, 'success');
            // 移除对应的表格行
            ids.forEach((id) => {
              const row = document.querySelector(`tr[data-visit-id="${id}"]`);
              if (row) {
                row.remove();
              }
            });
            updateSelectedCount();
            // 延迟刷新页面以更新统计数据
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            showMessage(result.message || '删除失败', 'error');
          }
        } catch (error) {
          console.error('Batch delete error:', error);
          showMessage('删除失败：网络错误', 'error');
        }
      }

      // 使用事件委托处理删除按钮点击
      document.addEventListener('click', function (event) {
        const target = event.target as HTMLElement;

        // 单个删除按钮
        if (
          target.classList.contains('delete-btn') &&
          target.getAttribute('data-action') === 'delete-single'
        ) {
          const visitId = target.getAttribute('data-visit-id');
          if (visitId) {
            deleteVisit(parseInt(visitId));
          }
        }

        // 批量删除按钮
        if (
          target.classList.contains('delete-btn') &&
          target.getAttribute('data-action') === 'delete-batch'
        ) {
          batchDelete();
        }
      });

      // 初始化选中数量显示
      updateSelectedCount();
    </script>
  </body>
</html>
